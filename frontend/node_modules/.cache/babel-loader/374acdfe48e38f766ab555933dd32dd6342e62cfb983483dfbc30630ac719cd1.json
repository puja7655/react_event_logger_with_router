{"ast":null,"code":"var _jsxFileName = \"/Users/puja/Documents/React Projects/router-project/frontend/src/pages/Event.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n// import EventsList from \"../components/EventsList\";\n\n// export default function Event() {\n//     const [fetchedData, setFectchedData] = useState();\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [error, setError] = useState();\n\n//     useEffect(() => {\n//         async function fetchData() {\n//             setIsLoading(true)\n//             try {\n//                 const response = await fetch('http://localhost:8080/events');\n//                 if (!response.ok) {\n//                     throw new Error(response.message || 'unable to fetch Events')\n//                 } else {\n//                     const resData = await response.json();\n//                     setFectchedData(resData.events)\n//                 }\n//             } catch (error) {\n//                 setError(error || 'unable to get Data')\n//             }\n//             setIsLoading(false)\n//         }\n//         fetchData()\n//     }, [])\n\n//     return (\n\n//         <>\n//             <div style={{ textAlign: 'center' }}>\n//                 {isLoading && <p>Loading...</p>}\n//                 {error && <p>{error}</p>}\n//             </div>\n//             {!isLoading && fetchedData && <EventsList events={fetchedData} />}\n//         </>\n//     )\n// }\n\n//with the help of Loader\n\nimport { useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Event() {\n  _s();\n  const events = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 31\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), !isLoading && fetchedData && /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 43\n    }, this)]\n  }, void 0, true);\n}\n_s(Event, \"0qsQ0LJMbp4ZAcOenpedLepO/y4=\", false, function () {\n  return [useLoaderData];\n});\n_c = Event;\nvar _c;\n$RefreshReg$(_c, \"Event\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","Event","_s","events","children","style","textAlign","isLoading","fileName","_jsxFileName","lineNumber","columnNumber","error","fetchedData","_c","$RefreshReg$"],"sources":["/Users/puja/Documents/React Projects/router-project/frontend/src/pages/Event.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n// import EventsList from \"../components/EventsList\";\n\n// export default function Event() {\n//     const [fetchedData, setFectchedData] = useState();\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [error, setError] = useState();\n\n//     useEffect(() => {\n//         async function fetchData() {\n//             setIsLoading(true)\n//             try {\n//                 const response = await fetch('http://localhost:8080/events');\n//                 if (!response.ok) {\n//                     throw new Error(response.message || 'unable to fetch Events')\n//                 } else {\n//                     const resData = await response.json();\n//                     setFectchedData(resData.events)\n//                 }\n//             } catch (error) {\n//                 setError(error || 'unable to get Data')\n//             }\n//             setIsLoading(false)\n//         }\n//         fetchData()\n//     }, [])\n\n//     return (\n\n//         <>\n//             <div style={{ textAlign: 'center' }}>\n//                 {isLoading && <p>Loading...</p>}\n//                 {error && <p>{error}</p>}\n//             </div>\n//             {!isLoading && fetchedData && <EventsList events={fetchedData} />}\n//         </>\n//     )\n// }\n\n\n//with the help of Loader\n\nimport { useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\n\nexport default function Event() {\n\n    const events = useLoaderData();\n    return (\n        <>\n            <div style={{ textAlign: 'center' }}>\n                {isLoading && <p>Loading...</p>}\n                {error && <p>{error}</p>}\n            </div>\n            {!isLoading && fetchedData && <EventsList events={events} />}\n        </>\n    )\n}\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAE5B,MAAMC,MAAM,GAAGR,aAAa,CAAC,CAAC;EAC9B,oBACIG,OAAA,CAAAE,SAAA;IAAAI,QAAA,gBACIN,OAAA;MAAKO,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAF,QAAA,GAC/BG,SAAS,iBAAIT,OAAA;QAAAM,QAAA,EAAG;MAAU;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EAC9BC,KAAK,iBAAId,OAAA;QAAAM,QAAA,EAAIQ;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,EACL,CAACJ,SAAS,IAAIM,WAAW,iBAAIf,OAAA,CAACF,UAAU;MAACO,MAAM,EAAEA;IAAO;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAC9D,CAAC;AAEX;AAACT,EAAA,CAZuBD,KAAK;EAAA,QAEVN,aAAa;AAAA;AAAAmB,EAAA,GAFRb,KAAK;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}