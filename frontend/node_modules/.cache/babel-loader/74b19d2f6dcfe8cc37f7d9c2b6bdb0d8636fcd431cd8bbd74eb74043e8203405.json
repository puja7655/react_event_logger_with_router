{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Event() {\n  _s();\n  const [fetchedData, setFectchedData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    async function fetchData() {\n      setIsLoading(true);\n      try {\n        const response = await fetch('http:\\\\localhost:8080/events');\n        const resData = await response.json();\n        setFectchedData(resData);\n        if (!response.ok) {\n          throw new Error(response.message || 'unable to fetch Events');\n        }\n      } catch (error) {\n        setError(error || 'unable to get Data');\n      }\n      setIsLoading(false);\n    }\n    fetchData();\n  }, []);\n  console.log(\"data\", fetchedData);\n  console.log(\"error\", error);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(Event, \"ixuKH5h04fHJYXPeMWd4GgoC06I=\");\n_c = Event;\nvar _c;\n$RefreshReg$(_c, \"Event\");","map":{"version":3,"names":["useState","useEffect","Fragment","_Fragment","jsxDEV","_jsxDEV","Event","_s","fetchedData","setFectchedData","isLoading","setIsLoading","error","setError","fetchData","response","fetch","resData","json","ok","Error","message","console","log","_c","$RefreshReg$"],"sources":["/Users/puja/Documents/React Projects/router-project/frontend/src/pages/Event.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport default function Event() {\n    const [fetchedData, setFectchedData] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        async function fetchData() {\n            setIsLoading(true)\n            try {\n                const response = await fetch('http:\\\\localhost:8080/events');\n                const resData = await response.json();\n                setFectchedData(resData)\n\n                if (!response.ok) {\n                    throw new Error(response.message || 'unable to fetch Events')\n                }\n            } catch (error) {\n                setError(error || 'unable to get Data')\n            }\n            setIsLoading(false)\n        }\n        fetchData()\n\n    }, [])\n    console.log(\"data\",fetchedData)\n    console.log(\"error\",error)\n    return (\n        <>\n\n        </>\n    )\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5C,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,WAAW,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACnD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACZ,eAAea,SAASA,CAAA,EAAG;MACvBH,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;QAC5D,MAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACrCT,eAAe,CAACQ,OAAO,CAAC;QAExB,IAAI,CAACF,QAAQ,CAACI,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAACL,QAAQ,CAACM,OAAO,IAAI,wBAAwB,CAAC;QACjE;MACJ,CAAC,CAAC,OAAOT,KAAK,EAAE;QACZC,QAAQ,CAACD,KAAK,IAAI,oBAAoB,CAAC;MAC3C;MACAD,YAAY,CAAC,KAAK,CAAC;IACvB;IACAG,SAAS,CAAC,CAAC;EAEf,CAAC,EAAE,EAAE,CAAC;EACNQ,OAAO,CAACC,GAAG,CAAC,MAAM,EAACf,WAAW,CAAC;EAC/Bc,OAAO,CAACC,GAAG,CAAC,OAAO,EAACX,KAAK,CAAC;EAC1B,oBACIP,OAAA,CAAAF,SAAA,mBAEE,CAAC;AAEX;AAACI,EAAA,CA/BuBD,KAAK;AAAAkB,EAAA,GAALlB,KAAK;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}