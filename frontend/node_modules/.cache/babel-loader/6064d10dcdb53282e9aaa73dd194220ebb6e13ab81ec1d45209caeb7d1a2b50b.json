{"ast":null,"code":"var _jsxFileName = \"/Users/puja/Documents/React Projects/router-project/frontend/src/pages/Event.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n// import EventsList from \"../components/EventsList\";\n\n// export default function Event() {\n//     const [fetchedData, setFectchedData] = useState();\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [error, setError] = useState();\n\n//     useEffect(() => {\n//         async function fetchData() {\n//             setIsLoading(true)\n//             try {\n//                 const response = await fetch('http://localhost:8080/events');\n//                 if (!response.ok) {\n//                     throw new Error(response.message || 'unable to fetch Events')\n//                 } else {\n//                     const resData = await response.json();\n//                     setFectchedData(resData.events)\n//                 }\n//             } catch (error) {\n//                 setError(error || 'unable to get Data')\n//             }\n//             setIsLoading(false)\n//         }\n//         fetchData()\n//     }, [])\n\n//     return (\n\n//         <>\n//             <div style={{ textAlign: 'center' }}>\n//                 {isLoading && <p>Loading...</p>}\n//                 {error && <p>{error}</p>}\n//             </div>\n//             {!isLoading && fetchedData && <EventsList events={fetchedData} />}\n//         </>\n//     )\n// }\n\n//with the help of Loader\n\nimport { useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Event() {\n  _s();\n  const events = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n//Here we are creating a function and using it in app.js for loader which is being usd to fetch data in the above component.\n//In this way Event.js and App.js both are laener . we are outsourcing the loader and it is present where it is being used\n_s(Event, \"0qsQ0LJMbp4ZAcOenpedLepO/y4=\", false, function () {\n  return [useLoaderData];\n});\n_c = Event;\nexport async function Loader() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw new Error(response.message || 'unable to fetch Events');\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\n_c2 = Loader;\nvar _c, _c2;\n$RefreshReg$(_c, \"Event\");\n$RefreshReg$(_c2, \"Loader\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","Event","_s","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Loader","response","fetch","ok","Error","message","resData","json","_c2","$RefreshReg$"],"sources":["/Users/puja/Documents/React Projects/router-project/frontend/src/pages/Event.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n// import EventsList from \"../components/EventsList\";\n\n// export default function Event() {\n//     const [fetchedData, setFectchedData] = useState();\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [error, setError] = useState();\n\n//     useEffect(() => {\n//         async function fetchData() {\n//             setIsLoading(true)\n//             try {\n//                 const response = await fetch('http://localhost:8080/events');\n//                 if (!response.ok) {\n//                     throw new Error(response.message || 'unable to fetch Events')\n//                 } else {\n//                     const resData = await response.json();\n//                     setFectchedData(resData.events)\n//                 }\n//             } catch (error) {\n//                 setError(error || 'unable to get Data')\n//             }\n//             setIsLoading(false)\n//         }\n//         fetchData()\n//     }, [])\n\n//     return (\n\n//         <>\n//             <div style={{ textAlign: 'center' }}>\n//                 {isLoading && <p>Loading...</p>}\n//                 {error && <p>{error}</p>}\n//             </div>\n//             {!isLoading && fetchedData && <EventsList events={fetchedData} />}\n//         </>\n//     )\n// }\n\n\n//with the help of Loader\n\nimport { useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\n\nexport default function Event() {\n\n    const events = useLoaderData();\n    return (\n        <>\n            <EventsList events={events} />\n        </>\n    )\n}\n\n//Here we are creating a function and using it in app.js for loader which is being usd to fetch data in the above component.\n//In this way Event.js and App.js both are laener . we are outsourcing the loader and it is present where it is being used\nexport async function Loader() {\n    const response = await fetch('http://localhost:8080/events');\n    if (!response.ok) {\n        throw new Error(response.message || 'unable to fetch Events')\n    } else {\n        const resData = await response.json();\n        return resData.events\n    }\n}\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAE5B,MAAMC,MAAM,GAAGR,aAAa,CAAC,CAAC;EAC9B,oBACIG,OAAA,CAAAE,SAAA;IAAAI,QAAA,eACIN,OAAA,CAACF,UAAU;MAACO,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAChC,CAAC;AAEX;;AAEA;AACA;AAAAN,EAAA,CAXwBD,KAAK;EAAA,QAEVN,aAAa;AAAA;AAAAc,EAAA,GAFRR,KAAK;AAY7B,OAAO,eAAeS,MAAMA,CAAA,EAAG;EAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAACH,QAAQ,CAACI,OAAO,IAAI,wBAAwB,CAAC;EACjE,CAAC,MAAM;IACH,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACrC,OAAOD,OAAO,CAACb,MAAM;EACzB;AACJ;AAACe,GAAA,GARqBR,MAAM;AAAA,IAAAD,EAAA,EAAAS,GAAA;AAAAC,YAAA,CAAAV,EAAA;AAAAU,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}