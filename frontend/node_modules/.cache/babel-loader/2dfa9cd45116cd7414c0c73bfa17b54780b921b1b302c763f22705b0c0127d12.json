{"ast":null,"code":"var _jsxFileName = \"/Users/puja/Documents/React Projects/router-project/frontend/src/App.js\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - Home\n//    - EventsPage\n//    - EventDetail\n//    - NewEvent\n//    - EditEvent\n// 2. Add routing & route definitions for these five pages\n//    - / => Home\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetail\n//    - /events/new => NewEvent\n//    - /events/<some-id>/edit => EditEvent\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetail\n// 7. Output the ID of the selected event on the EventDetail\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Event from './pages/Event';\nimport EventDetail from './pages/EventDetail';\nimport NewEvent from './pages/NewEvent';\nimport EditEvent from './pages/EditEvent';\nimport RootOutlet from './pages/root';\nimport Eventsroot from './pages/Eventsroot';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const router = createBrowserRouter([{\n    path: '/',\n    element: /*#__PURE__*/_jsxDEV(RootOutlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 27\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 33\n      }, this)\n    },\n    //default path\n    {\n      path: 'events',\n      element: /*#__PURE__*/_jsxDEV(Eventsroot, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 36\n      }, this),\n      children: [\n      // { index: true, element: <Event /> },//default path fro events\n      {\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(Event, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 37\n        }, this),\n        loader: async () => {\n          const response = await fetch('http://localhost:8080/events');\n          if (!response.ok) {\n            throw new Error(response.message || 'unable to fetch Events');\n          } else {\n            const resData = await response.json();\n            return resData.events;\n          }\n        }\n      }, {\n        path: ':eventId',\n        element: /*#__PURE__*/_jsxDEV(EventDetail, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 42\n        }, this)\n      }, {\n        path: 'new',\n        element: /*#__PURE__*/_jsxDEV(NewEvent, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 37\n        }, this)\n      }, {\n        path: ':eventId/edit',\n        element: /*#__PURE__*/_jsxDEV(EditEvent, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 47\n        }, this)\n      }]\n    }]\n  }]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(RouterProvider, {\n      router: router\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","RouterProvider","Home","Event","EventDetail","NewEvent","EditEvent","RootOutlet","Eventsroot","jsxDEV","_jsxDEV","App","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","children","index","loader","response","fetch","ok","Error","message","resData","json","events","_c","$RefreshReg$"],"sources":["/Users/puja/Documents/React Projects/router-project/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - Home\n//    - EventsPage\n//    - EventDetail\n//    - NewEvent\n//    - EditEvent\n// 2. Add routing & route definitions for these five pages\n//    - / => Home\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetail\n//    - /events/new => NewEvent\n//    - /events/<some-id>/edit => EditEvent\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetail\n// 7. Output the ID of the selected event on the EventDetail\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom'\nimport Home from './pages/Home';\nimport Event from './pages/Event';\nimport EventDetail from './pages/EventDetail';\nimport NewEvent from './pages/NewEvent';\nimport EditEvent from './pages/EditEvent';\nimport RootOutlet from './pages/root';\nimport Eventsroot from './pages/Eventsroot';\n\nfunction App() {\n  const router = createBrowserRouter([\n    {\n      path: '/', element: <RootOutlet />, children: [\n        { index: true, element: <Home /> }, //default path\n        {\n          path: 'events', element: <Eventsroot />, children: [\n            // { index: true, element: <Event /> },//default path fro events\n            {\n              index: true, element: <Event />,\n              loader: async () => {\n                const response = await fetch('http://localhost:8080/events');\n                if (!response.ok) {\n                  throw new Error(response.message || 'unable to fetch Events')\n                } else {\n                  const resData = await response.json();\n                  return resData.events\n                }\n              }\n            },\n            { path: ':eventId', element: <EventDetail /> },\n            { path: 'new', element: <NewEvent /> },\n            { path: ':eventId/edit', element: <EditEvent /> }\n          ]\n        }\n\n      ]\n    }\n  ])\n  return <div>\n    <RouterProvider router={router} />\n  </div>;\n}\n\nexport default App;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AACtE,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,WAAW,MAAM,qBAAqB;AAC7C,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,SAAS,MAAM,mBAAmB;AACzC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,UAAU,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,MAAM,GAAGZ,mBAAmB,CAAC,CACjC;IACEa,IAAI,EAAE,GAAG;IAAEC,OAAO,eAAEJ,OAAA,CAACH,UAAU;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAAEC,QAAQ,EAAE,CAC5C;MAAEC,KAAK,EAAE,IAAI;MAAEN,OAAO,eAAEJ,OAAA,CAACR,IAAI;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAE,CAAC;IAAE;IACpC;MACEL,IAAI,EAAE,QAAQ;MAAEC,OAAO,eAAEJ,OAAA,CAACF,UAAU;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;MAAEC,QAAQ,EAAE;MACjD;MACA;QACEC,KAAK,EAAE,IAAI;QAAEN,OAAO,eAAEJ,OAAA,CAACP,KAAK;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;QAC/BG,MAAM,EAAE,MAAAA,CAAA,KAAY;UAClB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;UAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;YAChB,MAAM,IAAIC,KAAK,CAACH,QAAQ,CAACI,OAAO,IAAI,wBAAwB,CAAC;UAC/D,CAAC,MAAM;YACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;YACrC,OAAOD,OAAO,CAACE,MAAM;UACvB;QACF;MACF,CAAC,EACD;QAAEhB,IAAI,EAAE,UAAU;QAAEC,OAAO,eAAEJ,OAAA,CAACN,WAAW;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE,CAAC,EAC9C;QAAEL,IAAI,EAAE,KAAK;QAAEC,OAAO,eAAEJ,OAAA,CAACL,QAAQ;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE,CAAC,EACtC;QAAEL,IAAI,EAAE,eAAe;QAAEC,OAAO,eAAEJ,OAAA,CAACJ,SAAS;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE,CAAC;IAErD,CAAC;EAGL,CAAC,CACF,CAAC;EACF,oBAAOR,OAAA;IAAAS,QAAA,eACLT,OAAA,CAACT,cAAc;MAACW,MAAM,EAAEA;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AACR;AAACY,EAAA,GAhCQnB,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}